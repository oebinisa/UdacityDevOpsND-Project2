AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Ebinisa Olorunninwo
  Udagram Project 2: December 2022

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  MyImageId:
    Description: The AMI for the OS of choice - Ubuntu 18
    Type: String

Resources:
  # Create Security Group for the Application Load Balancer
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}--VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group

  # Create Security Group for the Web Server
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer SG
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}--VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress: # Unrestricted outbound access
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServer Security Group

  # Create the Launch Configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          echo "Ebinisa's Udacity Project 2 Demo Web Server Up and Running!" > index.html
      # AMI for Ubuntu linux 18.04 LTS
      ImageId: ami-0135afc6d226a70a4
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10" # 10GB of storage

  # Create the Auto Scaling Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}--PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "2"
      MaxSize: "2"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Create the Application Load Balancer
  WebApploadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}--PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}--PUB2-SN"
      SecurityGroups:
        - Ref: ALBSecurityGroup

  # Create a Listener on Port 80
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebApploadBalancer
      Port: "80"
      Protocol: HTTP

  # Create the Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn:
        Ref: Listener
      Priority: 1

  # Create the Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}--VPCID"

Outputs:
  ALBSecurityGroup:
    Description: Application Load Balancer Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup

  WebServerSecurityGroup:
    Description: Webserver Security Group ID
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup

  LoadBalancerEndpoint:
    Description: This is the endpoint to use for accessing the LoadBalancer
    Value: !Join ["", ["http://", !GetAtt WebApploadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}--ALBURL
